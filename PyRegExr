import pcre2
import time
import json


def pcre2_search_dsk_040fix3(pattern, text, global_search=True, caseless=False, multiline=False, dotall=False):
    """
    Perform a PCRE2 regex search on the given text with support for flags.
    Fully compatible with pcre2 versions 0.1.0 through 0.4.0.
    """
    start_time = time.time()
    
    # Define PCRE2 flag values
    PCRE2_CASELESS = 0x00000008
    PCRE2_MULTILINE = 0x00000400
    PCRE2_DOTALL = 0x00000010

    # Configure flags
    flags = 0
    if caseless:
        flags |= PCRE2_CASELESS
    if multiline:
        flags |= PCRE2_MULTILINE
    if dotall:
        flags |= PCRE2_DOTALL

    # Version detection and compilation
    compiled_pattern = None
    use_bytes = False
    
    # Try 0.4.0+ style first
    try:
        pattern_bytes = pattern.encode('utf-8') if isinstance(pattern, str) else pattern
        text_bytes = text.encode('utf-8') if isinstance(text, str) else text
        compiled_pattern = pcre2.compile(pattern_bytes, flags=flags)
        use_bytes = True
    except Exception:
        # Fall back to pre-0.4.0 style
        try:
            compiled_pattern = pcre2.compile(pattern, flags)
            use_bytes = False
        except Exception as e:
            return {
                "success": False,
                "error": f"Pattern compilation failed: {str(e)}"
            }

    start_pos = 0
    matches = []

    while True:
        # Perform the match
        try:
            if use_bytes:
                match = compiled_pattern.match(text_bytes, start_pos)
            else:
                match = compiled_pattern.match(text, start_pos)
        except Exception:
            break  # No more matches

        # Extract match details
        try:
            if use_bytes:
                match_text = match.group().decode('utf-8') if hasattr(match, 'group') else match[0].decode('utf-8')
                match_start = match.start()
                match_length = len(match.group() if hasattr(match, 'group') else match[0])
            else:
                match_text = match[0] if match[0] else ''
                match_start = match.start()
                match_length = len(match[0])
        except Exception:
            break  # Invalid match object

        # Extract groups using universal approach
        groups = []
        i = 1
        while True:
            try:
                # Try all possible ways to get a group
                if hasattr(match, 'group'):
                    group = match.group(i)
                else:
                    group = match[i]
                
                if group is None:
                    break
                    
                if use_bytes and isinstance(group, bytes):
                    group = group.decode('utf-8')
                
                groups.append({
                    "i": match.start(i),
                    "l": len(group)
                })
                i += 1
            except Exception:
                break  # No more groups

        matches.append({
            "i": match_start,
            "l": match_length,
            "groups": groups
        })

        if not global_search:
            break

        # Update position
        try:
            start_pos = match.end() if hasattr(match, 'end') else (match_start + match_length)
        except Exception:
            break

    runtime = time.time() - start_time

    return {
        "success": True,
        "data": {
            "id": None,
            "timestamp": int(time.time()),
            "time": round(runtime, 4),
            "matches": matches,
            "mode": "text",
            "tool": {
                "id": "explain",
                "result": ""
            }
        },
        "metadata": {
            "script-time": f"{runtime * 1000:.2f}ms"
        }
    }


def pcre2_search_gpt_040_fix(pattern, text, global_search=True, caseless=False, multiline=False, dotall=False):
    import time
    import pcre2

    # Start timing the execution
    start_time = time.time()

    # Define PCRE2 flag values
    PCRE2_CASELESS = 0x00000008  # Case-insensitive matching
    PCRE2_MULTILINE = 0x00000400  # Multiline mode
    PCRE2_DOTALL = 0x00000010  # Dot-all mode

    # Configure flags
    flags = 0
    if caseless:
        flags |= PCRE2_CASELESS
    if multiline:
        flags |= PCRE2_MULTILINE
    if dotall:
        flags |= PCRE2_DOTALL

    # Compile the regular expression pattern with flags
    compiled_pattern = pcre2.compile(pattern, flags)

    # Initialize the starting position for the search
    start_pos = 0
    matches = []

    # Perform iterative search
    while start_pos < len(text):
        try:
            match = compiled_pattern.match(text, start_pos)
            if match is None:
                break  # No more matches found
        except pcre2.exceptions.MatchError:
            break  # No match found, exit loop

        # Extract match details
        match_start = match.start(0)
        match_length = match.end(0) - match_start
        groups = []

        # Get the number of capture groups dynamically
        group_values = match.groups()  # Tuple of captured groups
        num_groups = len(group_values)  # Safe way to count groups

        for i in range(num_groups):
            try:
                group_start = match.start(i + 1)
                group_length = match.end(i + 1) - group_start
                groups.append({"i": group_start, "l": group_length})
            except (IndexError, ValueError):
                pass  # Ignore out-of-bounds group references

        matches.append({"i": match_start, "l": match_length, "groups": groups})

        if not global_search:
            break  # Stop after the first match

        # Move start_pos forward to avoid infinite loops
        start_pos = match.end(0)
    
    # Calculate runtime
    runtime = time.time() - start_time

    # Build the JSON-like structure
    result = {
        "success": True,
        "data": {
            "id": None,
            "timestamp": int(time.time()),  # Current Unix timestamp
            "time": round(runtime, 4),  # Runtime in seconds, rounded to 4 decimal places
            "matches": matches,
            "mode": "text",
            "tool": {
                "id": "explain",
                "result": ""
            }
        },
        "metadata": {
            "script-time": f"{runtime * 1000:.2f}ms"  # Runtime in milliseconds
        }
    }

    return result

def pcre2_search_org(pattern, text, global_search=True, caseless=False, multiline=False, dotall=False):
    """
    Perform a PCRE2 regex search on the given text with support for flags.

    Args:
        pattern (str): The regex pattern to search for.
        text (str): The text to search within.
        global_search (bool): If True, perform a global search (find all matches).
                             If False, return only the first match.
        caseless (bool): If True, enable case-insensitive matching (PCRE2_CASELESS).
        multiline (bool): If True, enable multiline mode (PCRE2_MULTILINE).
        dotall (bool): If True, enable dot-all mode (PCRE2_DOTALL).

    Returns:
        dict: A JSON-like structure containing metadata and match details.
    """
    # Start timing the execution
    start_time = time.time()

    # Define PCRE2 flag values
    PCRE2_CASELESS = 0x00000008  # Case-insensitive matching
    PCRE2_MULTILINE = 0x00000400  # Multiline mode
    PCRE2_DOTALL = 0x00000010  # Dot-all mode

    # Configure flags
    flags = 0
    if caseless:
        flags |= PCRE2_CASELESS
    if multiline:
        flags |= PCRE2_MULTILINE
    if dotall:
        flags |= PCRE2_DOTALL

    # Compile the regular expression pattern with flags
    compiled_pattern = pcre2.compile(pattern, flags)

    # Initialize the starting position for the search
    start_pos = 0

    # List to store all matches
    matches = []

    # Perform iterative search
    while True:
        try:
            # Search for the pattern starting from `start_pos`
            match = compiled_pattern.match(text, start_pos)
        except pcre2.exceptions.MatchError:
            break  # No more matches found

        # Extract match details
        match_start = match.start()
        match_length = len(match[0])
        groups = []

        # Extract captured groups
        i = 1  # Start with the first capturing group
        while True:
            try:
                # Attempt to access the next group
                group = match[i]
                group_start = match.start(i)
                group_length = len(group)
                groups.append({
                    "i": group_start,
                    "l": group_length
                })
                i += 1
            except pcre2.exceptions.LibraryError:
                # No more groups available
                break

        # Store the match and captured groups
        matches.append({
            "i": match_start,
            "l": match_length,
            "groups": groups
        })

        # If not performing a global search, break after the first match
        if not global_search:
            break

        # Update the starting position to the end of the current match
        start_pos += match_length  # Move start_pos by the length of the full match

    # Calculate runtime
    runtime = time.time() - start_time

    # Build the JSON-like structure
    result = {
        "success": True,
        "data": {
            "id": None,
            "timestamp": int(time.time()),  # Current Unix timestamp
            "time": round(runtime, 4),  # Runtime in seconds, rounded to 4 decimal places
            "matches": matches,
            "mode": "text",
            "tool": {
                "id": "explain",
                "result": ""
            }
        },
        "metadata": {
            "script-time": f"{runtime * 1000:.2f}ms"  # Runtime in milliseconds
        }
    }

    return result








# Example usage
if __name__ == "__main__":

    # pattern = r"hello"  # Test pattern
    # text = "hello world, hello again!"
    # result = pcre2_search(pattern, text, global_search=True)
    # print(json.dumps(result, indent=2))

    
    # text = "The dates are 2023-10-05 and 2024-01-15. Also, 2022-12-25 is a special date."
    # #Perform a global search
    # result = pcre2_search(r'(\d{4})-(\d{2})-(\d{2})', text, global_search=True)
    # print(json.dumps(result, indent=2))


    # # Sample text to search
    # text = """RegExr was created by gskinner.com.

    # Edit the Expression & Text to see matches. Roll over matches or the expression for details. PCRE & JavaScript flavors of RegEx are supported. Validate your expression with Tests mode.

    # The side bar includes a Cheatsheet, full Reference, and Help. You can also Save & Share with the Community and view patterns you create or favorite in My Patterns.

    # Explore results with the Tools below. Replace & List output custom results. Details lists capture groups. Explain describes your expression in plain English.

    # """
    # # Perform a global search
    # result = pcre2_search(r'([A-Z])\w+', text, global_search=True)
    # print(json.dumps(result, indent=4))



    # Sample text to search
    text = "The dates are 2023-10-05 and 2024-01-15.\nAlso, 2022-12-25 is a special date."

    # Perform a global search with caseless, multiline, and dotall flags
    
    #result = pcre2_search_gpt_040_fix(
    result = pcre2_search_dsk_040fix3(
    #result = pcre2_search_org(
        r'(\d{4})-(\d{2})-(\d{2})',
        text,
        global_search=True,
        caseless=True,  # Case-insensitive matching
        multiline=True,  # ^ and $ match start/end of lines
        dotall=True      # . matches newline characters
    )

    # Print the result as a JSON string
    print(json.dumps(result, indent=4))

