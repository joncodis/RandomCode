<#
.SYNOPSIS
    Retrieves vCenter SSO users and optionally filters based on status and principal pattern.
.DESCRIPTION
    Connects to a vCenter server and retrieves SSO users with useful metadata.
.EXAMPLE
    ./Get-VCenterUsers.ps1 -Server vcenter.local -User 'administrator@vsphere.local' -Password 'VMware123!' -OnlyEnabled -PrincipalMatch '*admin*'
#>

param (
    [Parameter(Mandatory = $true)]
    [string]$Server,

    [Parameter(Mandatory = $true)]
    [string]$User,

    [Parameter(Mandatory = $true)]
    [string]$Password,

    [string]$Domain = 'vsphere.local',

    [string]$CsvOutput = '',
    [string]$JsonOutput = '',

    [string]$PrincipalMatch = '',

    [switch]$OnlyEnabled
)

function Get-VCenterUsers {
    param (
        [string]$Server,
        [string]$User,
        [string]$Password,
        [string]$Domain,
        [string]$PrincipalMatch,
        [bool]$OnlyEnabled
    )

    # Connect to vCenter
    Connect-VIServer -Server $Server -User $User -Password $Password | Out-Null

    # Fetch SSO users
    $users = Get-SsoPersonUser -Domain $Domain

    # Apply filters
    if ($OnlyEnabled) {
        $users = $users | Where-Object { $_.IsDisabled -eq $false }
    }

    if ($PrincipalMatch -ne '') {
        $pattern = $PrincipalMatch.Replace('*', '.*')
        $regex = [regex]::new("^$pattern$", 'IgnoreCase')
        $users = $users | Where-Object { $regex.IsMatch($_.PrincipalId) }
    }

    # Return relevant fields
    return $users | Select-Object `
        Name,
        Description,
        EmailAddress,
        IsDisabled,
        IsLocked,
        LockedTime,
        PasswordExpirationTime,
        PasswordLastSetTime,
        PrincipalId,
        Domain
}

# Execute function
$results = Get-VCenterUsers -Server $Server -User $User -Password $Password `
                            -Domain $Domain -PrincipalMatch $PrincipalMatch `
                            -OnlyEnabled:$OnlyEnabled.IsPresent

# Output
if ($CsvOutput) {
    $results | Export-Csv -Path $CsvOutput -NoTypeInformation
}
elseif ($JsonOutput) {
    $results | ConvertTo-Json -Depth 4 | Out-File $JsonOutput
}
else {
    $results | Format-Table -AutoSize
}
