import time
import logging
import requests
from flask import Flask, jsonify

# ----------------------------------------
# Config (replace with your own credentials)
# ----------------------------------------
CLIENT_ID = "your_spotify_client_id"
CLIENT_SECRET = "your_spotify_client_secret"
TOKEN_URL = "https://accounts.spotify.com/api/token"
API_BASE = "https://api.spotify.com/v1"

# ----------------------------------------
# Logging Setup
# ----------------------------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# ----------------------------------------
# Token Manager
# ----------------------------------------
class TokenManager:
    def __init__(self, client_id, client_secret, token_url):
        self.client_id = client_id
        self.client_secret = client_secret
        self.token_url = token_url
        self.access_token = None
        self.expires_at = 0  # unix timestamp

    def get_access_token(self):
        now = time.time()
        if self.access_token and now < self.expires_at:
            return self.access_token

        logging.info("Fetching new access token...")
        resp = requests.post(
            self.token_url,
            data={"grant_type": "client_credentials"},
            auth=(self.client_id, self.client_secret),
        )
        resp.raise_for_status()
        token_json = resp.json()

        self.access_token = token_json["access_token"]
        # subtract 60s so we refresh slightly before actual expiration
        self.expires_at = now + token_json["expires_in"] - 60  

        logging.info("New access token acquired, expires in %s seconds", token_json["expires_in"])
        return self.access_token


# ----------------------------------------
# API Helper (with auto-retry on 401)
# ----------------------------------------
def api_get(endpoint, params=None):
    token = token_manager.get_access_token()
    headers = {"Authorization": f"Bearer {token}"}

    resp = requests.get(f"{API_BASE}{endpoint}", headers=headers, params=params)
    if resp.status_code == 401:
        # token might have expired earlier than expected â€” refresh and retry once
        logging.warning("401 Unauthorized. Refreshing token and retrying...")
        token_manager.access_token = None  # force refresh
        token = token_manager.get_access_token()
        headers = {"Authorization": f"Bearer {token}"}
        resp = requests.get(f"{API_BASE}{endpoint}", headers=headers, params=params)

    if not resp.ok:
        logging.error("API request failed: %s %s", resp.status_code, resp.text)
        return None, resp.status_code

    return resp.json(), resp.status_code


# ----------------------------------------
# Flask App
# ----------------------------------------
app = Flask(__name__)
token_manager = TokenManager(CLIENT_ID, CLIENT_SECRET, TOKEN_URL)


@app.route("/artist/<artist_id>")
def get_artist(artist_id):
    data, status = api_get(f"/artists/{artist_id}")
    if not data:
        return jsonify({"error": "Failed to fetch artist"}), status
    return jsonify(data)


@app.route("/search/<query>")
def search(query):
    params = {"q": query, "type": "artist", "limit": 1}
    data, status = api_get("/search", params=params)
    if not data:
        return jsonify({"error": "Failed to search"}), status
    return jsonify(data)


if __name__ == "__main__":
    app.run(debug=True)
