<#
.SYNOPSIS
  Collects vSphere cluster, host, datastore, license, and certificate information.
  Outputs CSVs for MySQL import.

.DESCRIPTION
  - Designed for scheduled runs
  - Produces detailed CSVs for each object type
  - Appends summary data to a single summary.csv (trend over time)
  - All dates are in MySQL-friendly format: yyyy-MM-dd HH:mm:ss

.NOTES
  Author: Team Script
  Date:   2025-09-22
#>

# --- Connect to vCenter ---
# Connect-VIServer -Server "vcenter.domain" -User "username" -Password "password"

$timestamp    = Get-Date -Format "yyyy-MM-dd_HHmm"
$mysqlNow     = (Get-Date -Format "yyyy-MM-dd HH:mm:ss")

# ==========================
# CLUSTER DATA
# ==========================
$clusters = Get-Cluster | ForEach-Object {
    $cluster = $_
    $hosts   = Get-VMHost -Location $cluster
    $vms     = Get-VM -Location $cluster

    [PSCustomObject]@{
        DateCollected   = $mysqlNow
        ClusterName     = $cluster.Name
        NumHosts        = $hosts.Count
        NumVMs          = $vms.Count
        TotalCPU_MHz    = $cluster.CpuTotalMhz
        TotalMemGB      = [math]::Round($cluster.MemoryTotalGB,2)
        HAEnabled       = $cluster.HAEnabled
        HAFailoverLevel = $cluster.HAFailoverLevel
        DrsEnabled      = $cluster.DrsEnabled
        DrsMode         = $cluster.DrsAutomationLevel
    }
}
$clusters | Export-Csv "clusters_$timestamp.csv" -NoTypeInformation -Encoding UTF8

# ==========================
# HOST DATA
# ==========================
$hosts = Get-VMHost | Select-Object `
    @{n="DateCollected";e={$mysqlNow}},
    @{n="ClusterName";e={($_ | Get-Cluster).Name}},
    Name, Manufacturer, Model, CpuModel,
    NumCpuPkgs, NumCpuCores, NumCpuThreads,
    @{n="TotalCores";e={($_.NumCpuPkgs * $_.NumCpuCores)}},
    MemoryTotalGB, ConnectionState, PowerState,
    Version, Build, LicenseKey,
    @{n="LastBootTime";e={($_.ExtensionData.Summary.Runtime.BootTime).ToString("yyyy-MM-dd HH:mm:ss")}}
$hosts | Export-Csv "hosts_$timestamp.csv" -NoTypeInformation -Encoding UTF8

# ==========================
# DATASTORE DATA
# ==========================
$datastores = Get-Datastore | Select-Object `
    @{n="DateCollected";e={$mysqlNow}},
    Name, @{n="ClusterName";e={($_ | Get-Cluster).Name}},
    @{n="CapacityGB";e={[math]::Round($_.CapacityGB,2)}},
    @{n="FreeGB";e={[math]::Round($_.FreeSpaceGB,2)}},
    @{n="UsedGB";e={[math]::Round(($_.CapacityGB - $_.FreeSpaceGB),2)}},
    Type
$datastores | Export-Csv "datastores_$timestamp.csv" -NoTypeInformation -Encoding UTF8

# ==========================
# LICENSE DATA
# ==========================
$licMgr = Get-View (Get-View ServiceInstance).Content.LicenseManager
$licenses = $licMgr.Licenses

$licenses | ForEach-Object {
    [PSCustomObject]@{
        DateCollected  = (Get-Date -Format "yyyy-MM-dd HH:mm:ss")
        LicenseName    = $_.Name
        EditionKey     = $_.EditionKey
        Total          = $_.Total
        Used           = $_.Used
        ExpirationDate = if ($_.Properties.ContainsKey("expirationDate")) {
                            [datetime]$_.Properties["expirationDate"]
                         } else { $null }
    }
} | Export-Csv "licenses_$((Get-Date -Format 'yyyy-MM-dd_HHmm')).csv" -NoTypeInformation -Encoding UTF8
# ==========================
# HOST CERTIFICATES
# ==========================
$certs = @()
foreach ($vmhost in Get-VMHost) {
    try {
        $view = Get-View -Id $vmhost.Id -Property ConfigManager.CertificateManager
        $certMgr = Get-View $view.ConfigManager.CertificateManager
        $certsInfo = $certMgr.CertificateInfo

        foreach ($ci in $certsInfo) {
            $certs += [PSCustomObject]@{
                DateCollected = $mysqlNow
                HostName      = $vmhost.Name
                CertIssuer    = $ci.Issuer
                CertSubject   = $ci.Subject
                CertValidFrom = ($ci.NotBefore).ToString("yyyy-MM-dd HH:mm:ss")
                CertValidTo   = ($ci.NotAfter).ToString("yyyy-MM-dd HH:mm:ss")
                IsValid       = ($ci.Status -eq "ok")
            }
        }
    }
    catch {
        $certs += [PSCustomObject]@{
            DateCollected = $mysqlNow
            HostName      = $vmhost.Name
            CertIssuer    = "ERROR"
            CertSubject   = "ERROR"
            CertValidFrom = $null
            CertValidTo   = $null
            IsValid       = $false
        }
    }
}
$certs | Export-Csv "host_certs_$timestamp.csv" -NoTypeInformation -Encoding UTF8

# ==========================
# SUMMARY DATA (append mode)
# ==========================
$summary = [PSCustomObject]@{
    DateCollected   = $mysqlNow
    TotalClusters   = $clusters.Count
    TotalHosts      = $hosts.Count
    TotalVMs        = (Get-VM).Count
    TotalCPUPackages= ($hosts | Measure-Object -Property NumCpuPkgs -Sum).Sum
    TotalCores      = ($hosts | Measure-Object -Property TotalCores -Sum).Sum
    TotalThreads    = ($hosts | Measure-Object -Property NumCpuThreads -Sum).Sum
    TotalMemoryGB   = ($hosts | Measure-Object -Property MemoryTotalGB -Sum).Sum
    DatastoreCapGB  = ($datastores | Measure-Object -Property CapacityGB -Sum).Sum
    DatastoreUsedGB = ($datastores | Measure-Object -Property UsedGB -Sum).Sum
    DatastoreFreeGB = ($datastores | Measure-Object -Property FreeGB -Sum).Sum
    LicensesTotal   = ($licenses | Measure-Object -Property Total -Sum).Sum
    LicensesUsed    = ($licenses | Measure-Object -Property Used -Sum).Sum
}

$summaryFile = "summary.csv"
if (-Not (Test-Path $summaryFile)) {
    $summary | Export-Csv $summaryFile -NoTypeInformation -Encoding UTF8
} else {
    $summary | Export-Csv $summaryFile -NoTypeInformation -Append -Encoding UTF8
}

Write-Host "âœ… Data collection complete. CSVs written with timestamp $timestamp. Summary appended to summary.csv"
