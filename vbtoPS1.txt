package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"os"

	"github.com/vmware/govmomi"
	"github.com/vmware/govmomi/vapi/rest"
	"github.com/vmware/govmomi/vim25/soap"
)

type SSOUser struct {
	Name     string `json:"name"`
	Domain   string `json:"domain"`
	Disabled bool   `json:"disabled"`
}

func main() {
	ctx := context.Background()

	// Load env vars
	vcURL := os.Getenv("VCENTER_URL")
	username := os.Getenv("VCENTER_USERNAME")
	password := os.Getenv("VCENTER_PASSWORD")
	if vcURL == "" || username == "" || password == "" {
		log.Fatal("Missing required env vars: VCENTER_URL, VCENTER_USERNAME, VCENTER_PASSWORD")
	}

	// Parse URL and set credentials
	u, err := soap.ParseURL(vcURL)
	if err != nil {
		log.Fatalf("Failed to parse URL: %v", err)
	}
	u.User = url.UserPassword(username, password)

	// Connect to vCenter
	vimClient, err := govmomi.NewClient(ctx, u, true)
	if err != nil {
		log.Fatalf("SOAP login failed: %v", err)
	}

	// Initialize REST client
	restClient := rest.NewClient(vimClient.Client)
	if err := restClient.Login(ctx, u.User); err != nil {
		log.Fatalf("REST login failed: %v", err)
	}

	// Fetch SSO users
	var users []SSOUser
	if err := restGetJSON(ctx, restClient, "/api/vcenter/sso/user", &users); err != nil {
		log.Fatalf("Failed to fetch users: %v", err)
	}

	// Print results
	for _, user := range users {
		fmt.Printf("%s@%s (disabled: %v)\n", user.Name, user.Domain, user.Disabled)
	}
}

func restGetJSON(ctx context.Context, client *rest.Client, path string, out interface{}) error {
	req, err := client.NewRequest(ctx, "GET", path, nil)
	if err != nil {
		return err
	}
	return client.Do(ctx, req, out)
}
