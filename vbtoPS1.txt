package main

import (
	"context"
	"flag"
	"fmt"
	"net/url"
	"os"

	"github.com/vmware/govmomi"
	"github.com/vmware/govmomi/find"
	"github.com/vmware/govmomi/view"
	"github.com/vmware/govmomi/vim25/mo"
	"github.com/vmware/govmomi/vim25/types"
)

func main() {
	// Command-line flags
	vcenterURL := flag.String("url", "", "vCenter SDK URL (e.g. https://host/sdk)")
	username := flag.String("username", "", "vCenter username")
	password := flag.String("password", "", "vCenter password")
	insecure := flag.Bool("insecure", true, "Skip TLS verification")
	flag.Parse()

	if *vcenterURL == "" || *username == "" || *password == "" {
		fmt.Fprintln(os.Stderr, "Missing required flags")
		flag.PrintDefaults()
		os.Exit(1)
	}

	// Parse the URL without credentials
	u, err := url.Parse(*vcenterURL)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error parsing URL: %v\n", err)
		os.Exit(1)
	}

	// Set credentials
	u.User = url.UserPassword(*username, *password)

	ctx := context.Background()

	// Create vSphere client
	client, err := govmomi.NewClient(ctx, u, *insecure)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error connecting to vCenter: %v\n", err)
		os.Exit(1)
	}
	defer client.Logout(ctx)

	// Create a view manager
	mgr := view.NewManager(client.Client)

	// Create a container view of VirtualMachine objects
	view, err := mgr.CreateContainerView(ctx, client.ServiceContent.RootFolder, []string{"VirtualMachine"}, true)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error creating container view: %v\n", err)
		os.Exit(1)
	}
	defer view.Destroy(ctx)

	// Get VM list
	var vms []mo.VirtualMachine
	err = view.Retrieve(ctx, []string{"VirtualMachine"}, []string{"name"}, &vms)
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error retrieving VMs: %v\n", err)
		os.Exit(1)
	}

	// Output list of VMs
	fmt.Printf("Found %d VMs:\n", len(vms))
	for _, vm := range vms {
		fmt.Println("- " + vm.Name)
	}
}
