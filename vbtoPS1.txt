<#
.SYNOPSIS
    Queries vCenter for all local user accounts using the vCenter REST API.

.DESCRIPTION
    Uses basic authentication to get a session token, and then queries local accounts.
    Supports filtering by Enabled status and Principal name wildcard match.

.PARAMETER Server
    The vCenter hostname or IP.

.PARAMETER EnabledOnly
    Optional. If set to $true or $false, will only return accounts with that enabled state.

.PARAMETER PrincipalFilter
    Optional. Wildcard string to match against usernames.

.PARAMETER CsvOutput
    Optional. If provided, outputs to the given CSV path.

.EXAMPLE
    .\Get-VCenterLocalUsers.ps1 -Server vcenter.local -EnabledOnly $true -PrincipalFilter "adm*" -CsvOutput "users.csv"
#>

param (
    [Parameter(Mandatory = $true)]
    [string]$Server,

    [bool]$EnabledOnly,

    [string]$PrincipalFilter,

    [string]$CsvOutput
)

# Disable SSL certificate validation (for self-signed certs)
add-type @"
using System.Net;
using System.Security.Cryptography.X509Certificates;
public class TrustAllCertsPolicy : ICertificatePolicy {
    public bool CheckValidationResult(
        ServicePoint srvPoint, X509Certificate certificate,
        WebRequest request, int certificateProblem) {
        return true;
    }
}
"@
[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy

# Prompt for credentials (default username = current user)
$defaultUser = "$env:USERNAME@vsphere.local"
$creds = Get-Credential -UserName $defaultUser -Message "Enter vCenter credentials"

# Encode auth header
$authBytes = [System.Text.Encoding]::UTF8.GetBytes("$($creds.UserName):$($creds.GetNetworkCredential().Password)")
$auth = [Convert]::ToBase64String($authBytes)

# Get session ID from vCenter REST API
$uri = New-Object System.Uri ("https://$Server/rest/com/vmware/cis/session")
try {
    $response = Invoke-RestMethod -Uri $uri -Method Post -Headers @{ Authorization = "Basic $auth" }
    $sessionId = $response.value
}
catch {
    Write-Error "Failed to authenticate to vCenter: $_"
    exit 1
}

# Get local accounts
$uri = New-Object System.Uri ("https://$Server/api/appliance/local-account")
try {
    $usersResponse = Invoke-RestMethod -Uri $uri -Headers @{ "vmware-api-session-id" = $sessionId }
    $users = $usersResponse.value
}
catch {
    Write-Error "Failed to retrieve user list: $_"
    exit 1
}

# Apply filters
if ($EnabledOnly -ne $null) {
    $users = $users | Where-Object { $_.enabled -eq $EnabledOnly }
}

if ($PrincipalFilter) {
    $wildcard = $PrincipalFilter.Replace('*', '.*')
    $users = $users | Where-Object { $_.username -match "^$wildcard$" }
}

# Output results
if ($CsvOutput) {
    $users | Select-Object username, enabled, role, last_password_change_time, account_expiration_time | Export-Csv -Path $CsvOutput -NoTypeInformation
    Write-Output "User list exported to: $CsvOutput"
}
else {
    $users | Format-Table username, enabled, role, last_password_change_time, account_expiration_time -AutoSize
}


import ssl
import requests
import urllib3
from pyVim.connect import SmartConnect, Disconnect
import atexit

# Disable self-signed cert warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def get_vcenter_session_cookie(host, username, password):
    """
    Connect to vCenter via pyVmomi and return session cookie for REST API.
    """
    context = ssl._create_unverified_context()

    si = SmartConnect(host=host, user=username, pwd=password, sslContext=context)
    atexit.register(Disconnect, si)

    session_cookie = si._stub.cookie  # e.g., "vmware_soap_session=xyz; path=/; secure; HttpOnly"
    cookie_value = session_cookie.split('=')[1].split(';')[0]
    return cookie_value

def get_local_vcenter_users(vcenter_host, session_cookie):
    """
    Use the vSphere REST API to get local users, using the session from pyVmomi.
    """
    url = f"https://{vcenter_host}/api/appliance/local-account"
    headers = {
        "vmware-api-session-id": session_cookie
    }

    response = requests.get(url, headers=headers, verify=False)

    if response.status_code != 200:
        raise Exception(f"Failed to fetch users: {response.status_code} - {response.text}")

    return response.json().get("value", [])

# ðŸ”§ Usage
if __name__ == "__main__":
    VCENTER_HOST = "your-vcenter-host"
    USERNAME = "your-username@vsphere.local"
    PASSWORD = "your-password"

    print(f"Connecting to vCenter {VCENTER_HOST}...")

    session_id = get_vcenter_session_cookie(VCENTER_HOST, USERNAME, PASSWORD)
    users = get_local_vcenter_users(VCENTER_HOST, session_id)

    for user in users:
        print(f"{user['username']:<25}  Enabled: {user['enabled']}  Role: {user['role']}")
