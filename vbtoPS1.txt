Function New-ProgressBarIndeterminate {
    [void][System.Reflection.Assembly]::LoadWithPartialName('presentationframework')
    $syncHash = [hashtable]::Synchronized(@{})
    $newRunspace =[runspacefactory]::CreateRunspace()
    $syncHash.Runspace = $newRunspace
    $syncHash.AdditionalInfo = ''    
    [bool]$SyncHash.HidePercentProgress = $True
    [bool]$syncHash.IsIndeterminate = $False
    $newRunspace.ApartmentState = "STA"
    $newRunspace.ThreadOptions = "ReuseThread"
    $data = $newRunspace.Open() | Out-Null
    $newRunspace.SessionStateProxy.SetVariable("syncHash",$syncHash)

    $PowerShellCommand = [PowerShell]::Create().AddScript({
        [string]$xaml = @"
        <Window
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            Name="Window" Title="Please Wait" WindowStartupLocation = "CenterScreen"
            Width = "560" Height="130" SizeToContent="Height" ShowInTaskbar = "True">
            <StackPanel Margin="20">
               <ProgressBar Width="560" Height="24" Name="ProgressBar" IsIndeterminate="False"/>
               <TextBlock Name="PercentProgressTextBlock" Text="{Binding ElementName=ProgressBar, Path=Value, StringFormat={}{0:0}%}" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Hidden"/>
               <TextBlock Name="AdditionalInfoTextBlock" Text="" HorizontalAlignment="Center" VerticalAlignment="Center" />
            </StackPanel>
        </Window>
"@
        $syncHash.Window=[Windows.Markup.XamlReader]::parse( $xaml )
        ([xml]$xaml).SelectNodes("//*[@Name]") | %{ $SyncHash."$($_.Name)" = $SyncHash.Window.FindName($_.Name)}
        $updateBlock = {
            if ($SyncHash.IsIndeterminate) {
                $SyncHash.ProgressBar.IsIndeterminate="True"
            }  else {
                $SyncHash.ProgressBar.IsIndeterminate="False"
            }
            if ($SyncHash.HidePercentProgress) {
                $SyncHash.PercentProgressTextBlock.Visibility="Hidden"
            } else {
                $SyncHash.PercentProgressTextBlock.Visibility="Visible"
            }
            $SyncHash.Window.Title = $SyncHash.Activity
            $SyncHash.ProgressBar.Value = $SyncHash.PercentComplete
            $SyncHash.AdditionalInfoTextBlock.Text = $SyncHash.AdditionalInfo
            #$SyncHash.Window.MinWidth = $SyncHash.Window.ActualWidth
        }
        $syncHash.Window.Add_SourceInitialized( {
            $timer = new-object System.Windows.Threading.DispatcherTimer
            $timer.Interval = [TimeSpan]"0:0:0.01"
            $timer.Add_Tick( $updateBlock )
            $timer.Start()
            if( $timer.IsEnabled ) {
               Write-Host "Clock is running. Don't forget: RIGHT-CLICK to close it."
            } else {
               $clock.Close()
               Write-Error "Timer didn't start"
            }
        } )
        $syncHash.Window.ShowDialog() | Out-Null
        $syncHash.Error = $Error
    })
    $PowerShellCommand.Runspace = $newRunspace
    $data = $PowerShellCommand.BeginInvoke()
    Register-ObjectEvent -InputObject $SyncHash.Runspace `
            -EventName 'AvailabilityChanged' `
            -Action {
                    if($Sender.RunspaceAvailability -eq "Available")
                    {
                        $Sender.Closeasync()
                        $Sender.Dispose()
                    }

                } | Out-Null
    return $syncHash
}

function Write-ProgressBar {
    Param (
        [Parameter(Mandatory=$true)]
        $ProgressBar,
        [Parameter(Mandatory=$true)]
        [String]$Activity,
        [int]$PercentComplete,
        [String]$Status = $Null,
        [int]$SecondsRemaining = $Null,
        [String]$CurrentOperation = $Null,
        [bool]$HidePercentProgress = $false,
        [bool]$IsIndeterminate = $false
    )

    Write-Verbose -Message "Setting activity to $Activity"
    $ProgressBar.Activity = $Activity
    if ($IsIndeterminate) {
        $ProgressBar.IsIndeterminate=$true
    }  else {
        $ProgressBar.IsIndeterminate=$false
    }
    if ($HidePercentProgress) {
        $ProgressBar.HidePercentProgress=$true
    } else {
        $ProgressBar.HidePercentProgress=$false
    }

    if($PercentComplete) {
        Write-Verbose -Message "Setting PercentComplete to $PercentComplete"
        $ProgressBar.PercentComplete = $PercentComplete
    }

    if($SecondsRemaining) {
        [String]$SecondsRemaining = "$SecondsRemaining Seconds Remaining"
    } else {
        [String]$SecondsRemaining = $Null
    }

    $ProgressBar.AdditionalInfo = $Status
    #Write-Verbose -Message "Setting AdditionalInfo to $Status       $SecondsRemaining$(if($SecondsRemaining){ " seconds remaining..." }else {''})       $CurrentOperation"
    #$ProgressBar.AdditionalInfo = "$Status  $SecondsRemaining   $CurrentOperation"

}

function Close-ProgressBar {
    Param (
        [Parameter(Mandatory=$true)]
        [System.Object[]]$ProgressBar
    )
    $ProgressBar.Window.Dispatcher.Invoke([action]{
      $ProgressBar.Window.close()
    }, "Normal")
}

$ProgressBar2 = New-ProgressBarIndeterminate
Measure-Command -Expression {
    $Files = dir $env:USERPROFILE -Recurse
    $i = 0
    $Files | foreach {
        $i++
        #Start-Sleep -Milliseconds 1
        #Write-ProgressBar -ProgressBar $ProgressBar2 -Activity "Viewing Files" -PercentComplete (($i/$Files.count) * 100) -CurrentOperation $_.FullName -Status $_.Name -SecondsRemaining (100 - $_.count) -HidePercentProgress $false
        #Write-ProgressBar -ProgressBar $ProgressBar2 -Activity "Viewing Files" -PercentComplete (($i/$Files.count) * 100) -CurrentOperation $_.FullName -Status $_.Name -SecondsRemaining (100 - $_.count) -HidePercentProgress $true       
        Write-ProgressBar -ProgressBar $ProgressBar2 -Activity "Connecting to vCenter" -CurrentOperation $_.FullName -Status "Testing Status" -HidePercentProgress $True
    }
}
Close-ProgressBar $ProgressBar2
