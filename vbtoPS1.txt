# Event handler for the DrawColumnHeader event of the ListView control
$lv.add_DrawColumnHeader({
    param($sender, $e)

    $headerBounds = $e.Bounds
    $headerBounds.Width -= 1

    $columnIndex = $e.ColumnIndex

    # Clear the column header area
    $e.Graphics.FillRectangle([System.Drawing.SystemBrushes]::Control, $headerBounds)

    # Draw the column header text
    $e.Graphics.DrawString($lv.Columns[$columnIndex].Text, $lv.Font, [System.Drawing.SystemBrushes]::ControlText, $headerBounds)

    # Add the graphic to the column header if it matches the last processed column
    if ($columnIndex -eq $state.Value.ColumnIndex) {
        $sortOrder = $state.Value.SortOrder

        # Define the graphic or character for ascending and descending sort orders
        $ascendingGraphic = ' ▲'
        $descendingGraphic = ' ▼'

        # Calculate the size of the graphic
        $graphicSize = $e.Graphics.MeasureString($ascendingGraphic, $lv.Font)

        # Calculate the position to draw the graphic
        $graphicX = $headerBounds.Right - $graphicSize.Width
        $graphicY = ($headerBounds.Height - $graphicSize.Height) / 2

        # Draw the graphic based on the sort order
        if ($sortOrder -eq 'Ascending') {
            $e.Graphics.DrawString($ascendingGraphic, $lv.Font, [System.Drawing.SystemBrushes]::ControlText, $graphicX, $graphicY)
        }
        elseif ($sortOrder -eq 'Descending') {
            $e.Graphics.DrawString($descendingGraphic, $lv.Font, [System.Drawing.SystemBrushes]::ControlText, $graphicX, $graphicY)
        }
    }
})
