package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"os"

	"github.com/vmware/govmomi"
	"github.com/vmware/govmomi/session"
	"github.com/vmware/govmomi/vapi/rest"
)

type SSOUser struct {
	Name        string `json:"name"`
	Domain      string `json:"domain"`
	Description string `json:"description"`
	Disabled    bool   `json:"disabled"`
}

func main() {
	ctx := context.Background()

	vcURL := os.Getenv("VCENTER_URL")        // e.g. "https://vcenter.local/sdk"
	username := os.Getenv("VCENTER_USERNAME") // e.g. "administrator@vsphere.local"
	password := os.Getenv("VCENTER_PASSWORD") // e.g. "yourpassword"

	if vcURL == "" || username == "" || password == "" {
		log.Fatal("Please set VCENTER_URL, VCENTER_USERNAME, and VCENTER_PASSWORD environment variables")
	}

	u, err := url.Parse(vcURL)
	if err != nil {
		log.Fatalf("Invalid URL: %s", err)
	}
	u.User = url.UserPassword(username, password)

	// Connect to vSphere SOAP API
	soapClient, err := govmomi.NewClient(ctx, u, true)
	if err != nil {
		log.Fatalf("SOAP login failed: %s", err)
	}

	// Create REST client and login using session from SOAP
	restClient := rest.NewClient(soapClient.Client)
	sm := session.NewManager(soapClient.Client)
	if err := sm.Login(ctx, u.User); err != nil {
		log.Fatalf("SOAP session login failed: %s", err)
	}

	err = restClient.LoginByToken(ctx)
	if err != nil {
		log.Fatalf("REST login failed: %s", err)
	}

	// Call the REST API directly
	ssoUsersURL := restClient.URL().ResolveReference(&url.URL{Path: "/api/vcenter/sso/user"})
	req, err := http.NewRequestWithContext(ctx, "GET", ssoUsersURL.String(), nil)
	if err != nil {
		log.Fatalf("Failed to create request: %s", err)
	}

	// Attach session cookie to HTTP request
	restClient.SetHeader(req)

	resp, err := restClient.Client().Do(req)
	if err != nil {
		log.Fatalf("HTTP request failed: %s", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		log.Fatalf("REST call failed with status: %s", resp.Status)
	}

	var users []SSOUser
	if err := json.NewDecoder(resp.Body).Decode(&users); err != nil {
		log.Fatalf("Failed to decode JSON response: %s", err)
	}

	// Output JSON
	output, _ := json.MarshalIndent(users, "", "  ")
	fmt.Println(string(output))
}
