import requests
from urllib.parse import urljoin
import json

class vSphereSSOCookieClient:
    def __init__(self, host, username, password):
        self.base_url = f"https://{host}"
        self.session = requests.Session()
        self.session.verify = False  # For testing only
        
        # Critical headers to mimic browser behavior
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0 Safari/537.36',
            'Accept': 'application/json, text/javascript, */*; q=0.01',
            'X-Requested-With': 'XMLHttpRequest'
        })
        
        # Step 1: Get initial cookies
        self._get_initial_cookies()
        
        # Step 2: Perform UI login
        self._ui_login(username, password)

    def _get_initial_cookies(self):
        """Get required cookies from the login page"""
        init_url = urljoin(self.base_url, "/ui/")
        try:
            response = self.session.get(init_url, timeout=10)
            print(f"Initial cookies acquired: {list(self.session.cookies.keys())}")
        except Exception as e:
            print(f"Cookie initialization failed: {str(e)}")

    def _ui_login(self, username, password):
        """Perform UI login to establish session"""
        login_url = urljoin(self.base_url, "/ui/login")
        try:
            response = self.session.post(
                login_url,
                json={
                    "username": username,
                    "password": password,
                    "remember": False
                },
                headers={
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                }
            )
            
            if response.status_code == 200 and response.json().get('success'):
                print("UI login successful")
                print(f"Post-login cookies: {list(self.session.cookies.keys())}")
                return True
            
            print(f"Login failed ({response.status_code}): {response.text[:200]}")
            return False
        except Exception as e:
            print(f"Login error: {str(e)}")
            return False

    def get_psc_users(self, domain="vsphere.local"):
        """Access the PSC endpoint with proper cookies"""
        if not any(cookie.startswith('JSESSIONID') for cookie in self.session.cookies.keys()):
            print("No session cookie found - login likely failed")
            return None

        users_url = urljoin(self.base_url, "/psc-ui/ctrl/psc/tenant/users")
        params = {'domain': domain}
        
        try:
            # Critical: Must include X-CSRF-Token if required
            if 'X-CSRF-Token' not in self.session.headers:
                csrf_url = urljoin(self.base_url, "/ui/csrf-token")
                csrf_resp = self.session.get(csrf_url)
                if csrf_resp.status_code == 200:
                    self.session.headers['X-CSRF-Token'] = csrf_resp.text
            
            response = self.session.get(
                users_url,
                params=params,
                headers={
                    'Referer': urljoin(self.base_url, "/ui/"),
                    'Accept': 'application/json'
                }
            )
            
            if response.status_code == 200:
                users = response.json()
                # Process status if needed
                for user in users:
                    user['status'] = 'Disabled' if user.get('disabled') else 'Enabled'
                return users
            
            print(f"User fetch failed ({response.status_code}): {response.text[:500]}")
            print(f"Current cookies: {list(self.session.cookies.keys())}")
            return None
            
        except Exception as e:
            print(f"API Error: {str(e)}")
            return None

# Usage
client = vSphereSSOCookieClient("vcenter.example.com", "admin@vsphere.local", "password")
users = client.get_psc_users()

if users:
    print(f"Success! Found {len(users)} users:")
    for user in users[:5]:  # Print first 5 as sample
        print(f"{user.get('name')}: {user.get('status')}")
    with open('psc_users.json', 'w') as f:
        json.dump(users, f, indent=2)
else:
    print("Failed to retrieve users")
