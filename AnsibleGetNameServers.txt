---
# Playbook to gather hostname and nameserver information
# To change the nameserver delimiter, modify the ns_delimiter variable below
- name: Gather system nameserver information
  hosts: all
  vars:
    # Change this variable to modify the nameserver delimiter
    ns_delimiter: " | "
    error_message: "ERROR: No nameservers found or failed to retrieve"
    output_file: "/tmp/nameserver_report.csv"
  
  tasks:
    - name: Gather host facts
      setup:
        gather_subset: '!all'
    
    - name: Get hostname
      command: hostname
      register: hostname_cmd
      changed_when: false
    
    - name: Get nameservers (Ubuntu/Debian - systemd-resolved)
      shell: |
        if systemctl is-active --quiet systemd-resolved; then
          resolvectl status | awk '/DNS Servers:/ {for(i=3; i<=NF; i++) printf "%s ", $i}' | sed 's/ $//'
        else
          grep -E '^nameserver' /etc/resolv.conf | awk '{print $2}'
        fi
      register: ubuntu_nameservers
      ignore_errors: yes
      when: ansible_distribution in ['Ubuntu', 'Debian']
    
    - name: Get nameservers (CentOS/RHEL - NetworkManager)
      shell: |
        if command -v nmcli &> /dev/null && nmcli general status &> /dev/null; then
          nmcli dev show | awk '/IP4.DNS/ {print $2}'
        else
          grep -E '^nameserver' /etc/resolv.conf | awk '{print $2}'
        fi
      register: centos_nameservers
      ignore_errors: yes
      when: ansible_distribution in ['CentOS', 'RedHat']
    
    - name: Get nameservers (fallback method)
      shell: |
        grep -E '^nameserver' /etc/resolv.conf | awk '{print $2}'
      register: fallback_nameservers
      ignore_errors: yes
      when: >
        (ubuntu_nameservers is not defined or ubuntu_nameservers is skipped) and
        (centos_nameservers is not defined or centos_nameservers is skipped)
    
    - name: Set final nameservers variable
      set_fact:
        final_nameservers: >-
          {{
            (ubuntu_nameservers.stdout_lines if ubuntu_nameservers is defined and 'stdout_lines' in ubuntu_nameservers else []) +
            (centos_nameservers.stdout_lines if centos_nameservers is defined and 'stdout_lines' in centos_nameservers else []) +
            (fallback_nameservers.stdout_lines if fallback_nameservers is defined and 'stdout_lines' in fallback_nameservers else [])
          }}
    
    - name: Format nameservers output
      set_fact:
        formatted_nameservers: >-
          {{
            final_nameservers | unique | join(ns_delimiter) if final_nameservers | length > 0
            else error_message
          }}
    
    - name: Create CSV header if file doesn't exist
      lineinfile:
        path: "{{ output_file }}"
        line: "Ansible Host, System Hostname, Nameservers"
        create: yes
        state: absent
      run_once: true
      delegate_to: localhost
    
    - name: Append results to CSV file
      lineinfile:
        path: "{{ output_file }}"
        line: '"{{ ansible_host }}", "{{ hostname_cmd.stdout }}", "{{ formatted_nameservers }}"'
      delegate_to: localhost







    - name: Set final nameservers variable
      set_fact:
        final_nameservers: []
    
    - name: Add Ubuntu nameservers if available
      set_fact:
        final_nameservers: "{{ final_nameservers + ubuntu_nameservers.stdout_lines }}"
      when:
        - ubuntu_nameservers is defined
        - 'stdout_lines' in ubuntu_nameservers
        - ubuntu_nameservers.stdout_lines | length > 0
    
    - name: Add CentOS nameservers if available
      set_fact:
        final_nameservers: "{{ final_nameservers + centos_nameservers.stdout_lines }}"
      when:
        - centos_nameservers is defined
        - 'stdout_lines' in centos_nameservers
        - centos_nameservers.stdout_lines | length > 0
    
    - name: Add fallback nameservers if available
      set_fact:
        final_nameservers: "{{ final_nameservers + fallback_nameservers.stdout_lines }}"
      when:
        - fallback_nameservers is defined
        - 'stdout_lines' in fallback_nameservers
        - fallback_nameservers.stdout_lines | length > 0


