

#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
BRUTE-FORCE Netplan DNS Configurator
Forcefully replaces ALL DNS settings with specified nameservers
"""

import os
import sys
import argparse
import glob
import yaml

def find_netplan_files():
    """Find all netplan yaml files"""
    return glob.glob('/etc/netplan/*.yaml')

def backup_config(filepath):
    """Create timestamped backup"""
    from datetime import datetime
    backup_path = f"{filepath}.bak.{datetime.now().strftime('%Y%m%d%H%M%S')}"
    os.rename(filepath, backup_path)
    return backup_path

def enforce_dns_config(filepath, nameservers, apply_changes=False):
    """FORCE the exact DNS configuration"""
    try:
        with open(filepath, 'r') as f:
            config = yaml.safe_load(f) or {}
        
        # Initialize network structure if missing
        config.setdefault('network', {}).setdefault('ethernets', {})
        
        modified = False
        
        for interface in config['network']['ethernets'].values():
            # Skip DHCP interfaces
            if interface.get('dhcp4', False):
                continue
                
            # FORCE the nameservers configuration
            if 'nameservers' not in interface:
                interface['nameservers'] = {}
                modified = True
            
            # ALWAYS set the addresses exactly as specified
            interface['nameservers']['addresses'] = nameservers
            modified = True
        
        if modified:
            backup_path = backup_config(filepath)
            print(f"Backup created: {backup_path}")
            
            with open(filepath, 'w') as f:
                yaml.dump(config, f, default_flow_style=False, width=1000)
            
            print(f"DNS FORCED in: {filepath}")
            
            if apply_changes:
                os.system('netplan apply')
                print("Changes APPLIED immediately")
        else:
            print(f"No changes needed (DHCP only): {filepath}")
        
        return modified
        
    except Exception as e:
        print(f"ERROR processing {filepath}: {str(e)}", file=sys.stderr)
        return False

def main():
    parser = argparse.ArgumentParser(
        description='FORCE DNS nameservers in Netplan',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument(
        'nameservers', 
        nargs='+', 
        help='DNS servers (will REPLACE ALL existing)')
    parser.add_argument(
        '--apply', 
        action='store_true',
        help='IMMEDIATELY apply changes')
    parser.add_argument(
        '--force', 
        action='store_true',
        help='Override safety checks')
    
    args = parser.parse_args()
    
    # Basic IP validation (can be skipped with --force)
    if not args.force:
        for ns in args.nameservers:
            parts = ns.split('.')
            if len(parts) != 4 or not all(p.isdigit() and 0 <= int(p) <= 255 for p in parts):
                print(f"INVALID IP: {ns} (use --force to override)", file=sys.stderr)
                sys.exit(1)
    
    netplan_files = find_netplan_files()
    if not netplan_files:
        print("ERROR: No netplan configs found", file=sys.stderr)
        sys.exit(1)
    
    print(f"Targeting: {', '.join(netplan_files)}")
    print(f"Setting DNS to: {', '.join(args.nameservers)}")
    
    any_changed = False
    for config_file in netplan_files:
        if enforce_dns_config(config_file, args.nameservers, args.apply):
            any_changed = True
    
    if any_changed and not args.apply:
        print("\nWARNING: Changes made but NOT applied", file=sys.stderr)
        print("Run with --apply to activate", file=sys.stderr)
    elif not any_changed:
        print("\nNo changes made (all interfaces DHCP?)", file=sys.stderr)

if __name__ == '__main__':
    main()




