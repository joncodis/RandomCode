#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Netplan DNS configuration tool for Ubuntu (Python 2.6+ compatible)
"""

import os
import sys
import argparse
import glob
import re
import yaml  # Python's built-in yaml module (pyyaml is typically installed by default on Ubuntu)

def find_netplan_files():
    """Find all netplan yaml files in /etc/netplan/"""
    return glob.glob('/etc/netplan/*.yaml')

def backup_netplan_file(filepath):
    """Create a backup of the netplan file"""
    backup_path = filepath + '.bak'
    with open(filepath, 'r') as src, open(backup_path, 'w') as dst:
        dst.write(src.read())
    return backup_path

def modify_dns_config(filepath, nameservers, apply_changes=False):
    """Modify DNS settings in the netplan file"""
    try:
        with open(filepath, 'r') as f:
            config = yaml.safe_load(f)
        
        modified = False
        
        # Iterate through all network interfaces
        if 'network' in config and 'ethernets' in config['network']:
            for interface in config['network']['ethernets'].values():
                if 'nameservers' in interface and 'addresses' in interface['nameservers']:
                    # Remove existing DNS servers
                    interface['nameservers']['addresses'] = nameservers
                    modified = True
                elif 'dhcp4' in interface and not interface.get('dhcp4', True):
                    # Static IP configuration without DNS specified - add DNS
                    interface['nameservers'] = {'addresses': nameservers}
                    modified = True
        
        if modified:
            backup_path = backup_netplan_file(filepath)
            print("Backup created at: {}".format(backup_path))
            
            with open(filepath, 'w') as f:
                yaml.dump(config, f, default_flow_style=False)
            
            print("DNS servers updated in: {}".format(filepath))
            
            if apply_changes:
                apply_netplan()
        else:
            print("No changes made to: {}".format(filepath))
            return False
        
        return True
    except Exception as e:
        print("Error processing {}: {}".format(filepath, str(e)))
        return False

def apply_netplan():
    """Apply netplan changes"""
    print("Applying netplan changes...")
    os.system('netplan apply')

def main():
    parser = argparse.ArgumentParser(description='Configure DNS nameservers in Ubuntu Netplan')
    parser.add_argument('nameservers', nargs='+', help='DNS nameserver IP addresses')
    parser.add_argument('--apply', action='store_true', help='Apply netplan changes immediately')
    
    args = parser.parse_args()
    
    netplan_files = find_netplan_files()
    if not netplan_files:
        print("No netplan configuration files found in /etc/netplan/")
        sys.exit(1)
    
    print("Found netplan files: {}".format(", ".join(netplan_files)))
    
    any_modified = False
    for filepath in netplan_files:
        if modify_dns_config(filepath, args.nameservers, args.apply):
            any_modified = True
    
    if any_modified and not args.apply:
        print("\nChanges have been made but not applied. Use --apply to activate them.")
    elif not any_modified:
        print("\nNo configuration files were modified.")

if __name__ == '__main__':
    main()






---
- name: Configure DNS nameservers using Python script (Netplan)
  hosts: all
  gather_facts: true
  become: true

  vars:
    new_nameservers:
      - "1.1.1.1"
      - "8.8.8.8"
    apply_changes: true

  tasks:
    - name: Check if system is Ubuntu with Netplan
      ansible.builtin.assert:
        that:
          - ansible_distribution == 'Ubuntu'
          - "'netplan' in ansible_facts.packages"
        fail_msg: "Target system must be Ubuntu with Netplan installed"

    - name: Get current DNS configuration
      ansible.builtin.shell: |
        netplan get --all | awk '/nameservers:/,/^[^ ]/ {if ($0 ~ /addresses:/) {print $2}}' | tr -d '[]' | tr ',' '\n' | tr -d ' ' | grep -v '^$'
      register: current_dns
      changed_when: false

    - name: Display current DNS servers
      ansible.builtin.debug:
        msg: "Current DNS servers: {{ current_dns.stdout_lines | default([]) }}"

    - name: Copy Python script to target
      ansible.builtin.copy:
        dest: /usr/local/bin/set_netplan_dns.py
        content: |
          {{ lookup('file', 'netplan-dns.py') }}
        mode: '0755'

    - name: Execute Python script to update DNS
      ansible.builtin.command: >
        /usr/local/bin/set_netplan_dns.py
        {% if apply_changes %}--apply{% endif %}
        {{ new_nameservers | join(' ') }}
      register: script_output
      changed_when: "'Changes have been made' in script_output.stdout or 'DNS servers updated' in script_output.stdout"

    - name: Show script output
      ansible.builtin.debug:
        var: script_output.stdout_lines




Usage Notes:
Prerequisites:

Save the Python/Bash scripts to files named netplan-dns.py and netplan-dns.sh in your Ansible control node

The playbooks will automatically transfer these scripts to target systems

Customization:

Modify new_nameservers variable to set your desired DNS servers

Set apply_changes: false if you want to review changes before applying

Execution:

bash
Copy
# For Python script
ansible-playbook -i inventory python_netplan_dns.yml

# For Bash script
ansible-playbook -i inventory bash_netplan_dns.yml
Targeting:

The playbooks automatically filter for Ubuntu systems with Netplan

For more specific targeting, use Ansible inventory groups or patterns

Verification:

Both playbooks show before/after DNS configurations

The Bash script playbook includes an additional verification step

These playbooks ensure idempotency (won't make changes if DNS is already configured as desired) and provide clear feedback about the current and new DNS configurations.
