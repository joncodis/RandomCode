---
- name: Gather External DNS Resolvers
  hosts: all
  gather_facts: no  # Avoids unnecessary overhead
  
  tasks:
    - name: Get hostname
      command: hostname
      register: hostname_output
      changed_when: false

    - name: Get system's primary IP address
      command: ip -json addr show
      register: ip_address_json
      changed_when: false

    - name: Parse system's primary IP (non-loopback)
      set_fact:
        ip_address: >-
          {{ ip_address_json.stdout | from_json 
          | selectattr('ifname', '!=', 'lo') 
          | map(attribute='addr_info') | list | sum(start=[]) 
          | selectattr('family', 'equalto', 'inet') 
          | map(attribute='local') | list | reject('search', '^(127\.|::1|0\.0\.0\.0)') 
          | first | default('Unknown') }}

    - name: Debug - Parsed IP Address
      debug:
        msg: "Discovered IP Address: {{ ip_address }}"

    - name: Check if systemd-resolved is active
      command: systemctl is-active systemd-resolved
      register: systemd_resolved_status
      changed_when: false
      failed_when: false

    - name: Get name servers (Ubuntu - systemd-resolved)
      command: resolvectl status
      register: resolvectl_output
      changed_when: false
      when: systemd_resolved_status.stdout == "active"

    - name: Debug - resolvectl raw output
      debug:
        msg: "{{ resolvectl_output.stdout }}"
      when: systemd_resolved_status.stdout == "active"

    - name: Parse name servers from resolvectl
      set_fact:
        name_servers: >-
          {{ resolvectl_output.stdout 
          | regex_findall('DNS Servers:\\s+((?:[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\s*)+)') 
          | first | default('') | split(' ') 
          | reject('search', '^(127\.|::1|0\.0\.0\.0)') | list }}
      when: systemd_resolved_status.stdout == "active"

    - name: Debug - Parsed Name Servers from resolvectl
      debug:
        msg: "Discovered Name Servers from resolvectl: {{ name_servers }}"
      when: systemd_resolved_status.stdout == "active"

    - name: Get name servers from resolv.conf (Fallback)
      command: grep '^nameserver' /etc/resolv.conf
      register: resolv_conf_output
      changed_when: false
      when: name_servers | length == 0

    - name: Debug - resolv.conf raw output
      debug:
        msg: "{{ resolv_conf_output.stdout }}"
      when: name_servers | length == 0

    - name: Parse name servers from resolv.conf
      set_fact:
        name_servers: >-
          {{ resolv_conf_output.stdout | regex_findall('nameserver\\s+([0-9\\.]+)') 
          | reject('search', '^(127\.|::1|0\.0\.0\.0)') | list }}
      when: name_servers | length == 0

    - name: Debug - Parsed Name Servers from resolv.conf
      debug:
        msg: "Discovered Name Servers from resolv.conf: {{ name_servers }}"
      when: name_servers | length == 0

    - name: Get name servers using NetworkManager (nmcli)
      command: nmcli dev show | grep 'IP4.DNS'
      register: nmcli_output
      changed_when: false
      failed_when: false

    - name: Debug - nmcli raw output
      debug:
        msg: "{{ nmcli_output.stdout }}"
      when: name_servers | length == 0

    - name: Parse name servers from nmcli
      set_fact:
        name_servers: >-
          {{ nmcli_output.stdout | regex_findall('IP4.DNS\\[?\\d*\\]?\\s+([0-9\\.]+)') 
          | reject('search', '^(127\.|::1|0\.0\.0\.0)') | list }}
      when: name_servers | length == 0

    - name: Debug - Parsed Name Servers from nmcli
      debug:
        msg: "Discovered Name Servers from nmcli: {{ name_servers }}"
      when: name_servers | length == 0

    - name: Set error message if no external DNS servers found
      set_fact:
        name_servers: ["No external DNS resolvers found - check system settings"]
      when: name_servers | length == 0

    - name: Ensure proper name server formatting for CSV output
      set_fact:
        name_servers_str: "{{ name_servers | join('\n') }}"  # Ensures correct Excel formatting

    - name: Debug - Final Name Server String for CSV
      debug:
        msg: "Final Name Servers String: {{ name_servers_str }}"

    - name: Collect all results
      set_fact:
        host_data: "{{ host_data | default([]) + 
                      [hostname_output.stdout + ',' + ip_address + ',\"' + name_servers_str + '\"'] }}"

    - name: Debug - Final Host Data for CSV
      debug:
        msg: "Final Host Data: {{ host_data }}"

    - name: Store results in CSV file
      delegate_to: localhost
      run_once: true
      copy:
        content: "Hostname,IP Address,Name Servers\n{{ host_data | join('\n') }}"
        dest: "./external_dns_info.csv"
