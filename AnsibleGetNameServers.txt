---
# Ultimate nameserver collection with NetworkManager alternatives - 11
- name: Gather system nameserver information
  hosts: all
  vars:
    ns_delimiter: " | "
    output_file: "/tmp/nameserver_report.csv"
    local_dns_patterns:
      - '^127\.'
      - '^::1'
      - '^localhost'
      - '^fe80:'
  
  tasks:
    # [Previous initialization tasks remain the same...]

    - name: Process each host
      block:
        - name: Attempt to gather host information
          block:
            # [Previous host facts and hostname collection remains...]

            # Ubuntu/Debian NetworkManager detection with multiple fallbacks
            - name: Detect NetworkManager configuration (Ubuntu/Debian)
              block:
                - name: Check for NetworkManager service files
                  shell: |
                    if systemctl list-unit-files | grep -q NetworkManager.service; then
                      echo "service_exists"
                    else
                      echo "no_service"
                    fi
                  register: nm_service_check
                  changed_when: false
                  ignore_errors: yes
                
                - name: Check for NetworkManager config files
                  shell: |
                    if [ -d /etc/NetworkManager ] && [ -n "$(ls -A /etc/NetworkManager)" ]; then
                      echo "config_exists"
                    else
                      echo "no_config"
                    fi
                  register: nm_config_check
                  changed_when: false
                  ignore_errors: yes
                
                - name: Determine NetworkManager status
                  set_fact:
                    nm_active: >-
                      {{
                        'active' if 
                        (nm_service_check.stdout == 'service_exists' and 
                         nm_config_check.stdout == 'config_exists') 
                        else 'inactive'
                      }}
              when: ansible_distribution in ['Ubuntu', 'Debian']
              ignore_errors: yes
              tags: always

            # Enhanced nameserver collection for NetworkManager systems
            - name: Collect NetworkManager nameservers (multiple methods)
              block:
                # Method 1: nmcli (if available)
                - name: Try nmcli first
                  shell: |
                    if command -v nmcli >/dev/null; then
                      nmcli dev show | awk '/IP4.DNS/ {print $2}' | grep -vE '^(127\.|::1|localhost|fe80:)'
                    else
                      echo ""
                    fi
                  register: nmcli_output
                  changed_when: false
                  ignore_errors: yes
                
                # Method 2: NetworkManager config files
                - name: Parse NetworkManager connection files
                  shell: |
                    find /etc/NetworkManager/system-connections/ -type f -name "*.nmconnection" -exec grep -h '^dns=' {} + | 
                    awk -F= '{print $2}' | tr ',' '\n' | grep -vE '^(127\.|::1|localhost|fe80:)'
                  register: nm_config_output
                  changed_when: false
                  ignore_errors: yes
                  when: nmcli_output.stdout == ''
                
                # Method 3: DHCP lease files
                - name: Check DHCP lease files
                  shell: |
                    find /var/lib/NetworkManager/ -name "*.lease" -exec grep -h 'domain-name-servers' {} + |
                    awk '{print $3}' | tr ',' '\n' | grep -vE '^(127\.|::1|localhost|fe80:)'
                  register: dhcp_output
                  changed_when: false
                  ignore_errors: yes
                  when: nm_config_output.stdout == ''
                
                - name: Combine NetworkManager results
                  set_fact:
                    nm_nameservers: >-
                      {{
                        (nmcli_output.stdout_lines if nmcli_output.stdout_lines | length > 0 else []) +
                        (nm_config_output.stdout_lines if nm_config_output.stdout_lines | length > 0 else []) +
                        (dhcp_output.stdout_lines if dhcp_output.stdout_lines | length > 0 else [])
                      }}
              when: 
                - ansible_distribution in ['Ubuntu', 'Debian']
                - nm_active == 'active'
              ignore_errors: yes
              tags: always

            # [Rest of your existing tasks for other collection methods...]
            
            # Modified nameserver list compilation
            - name: Compile final nameserver list
              set_fact:
                nameservers_list: >-
                  {{
                    (nm_nameservers if nm_nameservers is defined else []) +
                    (ubuntu_nameservers if ubuntu_nameservers is defined else []) +
                    (centos_nameservers if centos_nameservers is defined else []) +
                    (fallback_nameservers if fallback_nameservers is defined else [])
                  }}
              tags: always

          rescue:
            - name: Set failure information
              set_fact:
                host_report:
                  hostname: "{{ final_hostname | default('n/a') }}"
                  nameservers: "ERROR: DNS collection failed"
              tags: always

          always:
            - name: Ensure minimal report exists
              set_fact:
                host_report:
                  hostname: "{{ host_report.hostname | default('n/a') }}"
                  nameservers: >-
                    {{
                      host_report.nameservers | default('ERROR: Unknown failure') |
                      regex_replace('\\|\\s+\\|', '|') |  # Clean up empty entries
                      regex_replace('^\\|', '') |          # Remove leading delimiter
                      regex_replace('\\|$', '')            # Remove trailing delimiter
                    }}
              tags: always

        - name: Record host information
          lineinfile:
            path: "{{ output_file }}"
            line: '"{{ ansible_host }}","{{ host_report.hostname }}","{{ host_report.nameservers }}"'
            insertafter: EOF
          delegate_to: localhost
          when: not ansible_check_mode
          tags: always
      tags: always
