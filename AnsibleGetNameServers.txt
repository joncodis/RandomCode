---
# Playbook with comprehensive nameserver detection including Ubuntu Desktop/NetworkManager
- name: Gather system nameserver information - 8
  hosts: all
  vars:
    ns_delimiter: " | "
    output_file: "/tmp/nameserver_report.csv"
    local_dns_patterns:
      - '^127\.'
      - '^::1'
      - '^localhost'
      - '^fe80:'
  
  tasks:
    # [Previous initialization tasks remain the same...]

    - name: Process each host
      block:
        - name: Attempt to gather host information
          block:
            - name: Gather minimal host facts
              setup:
                gather_subset: '!all'
              register: host_facts
              ignore_errors: yes
              tags: always

            # [Previous hostname and initialization tasks remain...]

            - name: Try all nameserver collection methods (Ubuntu)
              block:
                - name: Check for NetworkManager on Ubuntu
                  shell: |
                    if [ -f /usr/bin/nmcli ] && systemctl is-active NetworkManager >/dev/null 2>&1; then
                      echo "networkmanager"
                    elif systemctl is-active --quiet systemd-resolved; then
                      echo "systemd-resolved"
                    else
                      echo "resolvconf"
                    fi
                  register: ubuntu_dns_system
                  changed_when: false
                  ignore_errors: yes
                  when: ansible_distribution in ['Ubuntu', 'Debian']

                - name: Get nameservers via NetworkManager (Ubuntu Desktop)
                  shell: |
                    nmcli dev show | awk '/IP4.DNS/ {print $2}' || echo ''
                  register: nm_output
                  changed_when: false
                  ignore_errors: yes
                  when: 
                    - ansible_distribution in ['Ubuntu', 'Debian']
                    - ubuntu_dns_system.stdout == 'networkmanager'

                - name: Get nameservers via systemd-resolved (Ubuntu Server)
                  shell: |
                    resolvectl status | awk '/DNS Servers:/ {for(i=3; i<=NF; i++) printf "%s ", $i}' | sed 's/ $//' || echo ''
                  register: resolved_output
                  changed_when: false
                  ignore_errors: yes
                  when: 
                    - ansible_distribution in ['Ubuntu', 'Debian']
                    - ubuntu_dns_system.stdout == 'systemd-resolved'

                - name: Get nameservers via resolv.conf (Fallback)
                  shell: |
                    grep -E '^nameserver' /etc/resolv.conf | awk '{print $2}' || echo ''
                  register: resolv_output
                  changed_when: false
                  ignore_errors: yes
                  when: 
                    - ansible_distribution in ['Ubuntu', 'Debian']
                    - ubuntu_dns_system.stdout == 'resolvconf'

                - name: Combine Ubuntu nameserver results
                  set_fact:
                    ubuntu_nameservers: >-
                      {{
                        (nm_output.stdout_lines if nm_output is defined else []) +
                        (resolved_output.stdout_lines if resolved_output is defined else []) +
                        (resolv_output.stdout_lines if resolv_output is defined else [])
                      }}
                  when: ansible_distribution in ['Ubuntu', 'Debian']

                - name: Filter and add Ubuntu nameservers
                  set_fact:
                    nameservers_list: >-
                      {{
                        nameservers_list + 
                        (ubuntu_nameservers | 
                         select('match', '.*') |
                         reject('match', '^(' + (local_dns_patterns | join('|')) + ')') |
                         list)
                      }}
                  when: 
                    - ubuntu_nameservers is defined
                    - ubuntu_nameservers | length > 0

              when: ansible_distribution in ['Ubuntu', 'Debian']
              ignore_errors: yes

            # [Existing CentOS/RHEL and fallback methods remain unchanged...]

          rescue:
            - name: Set connection failure information
              set_fact:
                host_report:
                  hostname: "n/a"
                  nameservers: "ERROR: Failed to connect or gather facts"
              tags: always

          always:
            - name: Ensure report exists for host
              set_fact:
                host_report: >-
                  {{
                    host_report | default({
                      'hostname': hostname_cmd.stdout if hostname_cmd is defined and hostname_cmd.stdout is defined else 'n/a',
                      'nameservers': 'ERROR: No DNS information collected'
                    })
                  }}
              tags: always

        - name: Record host information
          lineinfile:
            path: "{{ output_file }}"
            line: '"{{ ansible_host }}","{{ host_report.hostname }}","{{ host_report.nameservers }}"'
            insertafter: EOF
          delegate_to: localhost
          when: not ansible_check_mode
          tags: always
      tags: always
