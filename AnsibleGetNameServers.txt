---
- name: Gather External DNS Resolvers
  hosts: all
  gather_facts: no  # Avoids unnecessary overhead

  vars:
    name_server_delimiter: " | "  # Change to "\n" for newline-separated DNS entries

  tasks:
    - name: Debug - Show ansible_host
      debug:
        msg: "Processing host: {{ ansible_host }}"

    - name: Get ansible_host (mandatory)
      set_fact:
        target_host: "{{ ansible_host }}"

    - name: Get hostname
      command: hostname
      register: hostname_output
      changed_when: false
      ignore_errors: true

    - name: Set hostname (fallback to 'Unknown' if not found)
      set_fact:
        system_hostname: "{{ hostname_output.stdout | default('Unknown', true) }}"

    - name: Get system's primary IP address
      command: ip -json addr show
      register: ip_address_json
      changed_when: false
      ignore_errors: true

    - name: Parse system's primary IP (non-loopback)
      set_fact:
        ip_address: >-
          {{ ip_address_json.stdout | from_json 
          | selectattr('ifname', '!=', 'lo') 
          | map(attribute='addr_info') | list | sum(start=[]) 
          | selectattr('family', 'equalto', 'inet') 
          | map(attribute='local') | list 
          | reject('search', '^(127\.|::1|0\.0\.0\.0)') 
          | first | default('Unknown') }}

    - name: Check if systemd-resolved is active
      command: systemctl is-active systemd-resolved
      register: systemd_resolved_status
      changed_when: false
      failed_when: false
      ignore_errors: true

    - name: Get name servers (Ubuntu - systemd-resolved)
      command: resolvectl status
      register: resolvectl_output
      changed_when: false
      ignore_errors: true
      when: systemd_resolved_status.stdout == "active"

    - name: Parse name servers from resolvectl
      set_fact:
        name_servers: >-
          {{ resolvectl_output.stdout 
          | regex_findall('^\s*DNS Servers:\s*((?:\d{1,3}\.){3}\d{1,3}(?:\s+(?:\d{1,3}\.){3}\d{1,3})*)', multiline=True) 
          | first | default('') | split(' ') 
          | reject('search', '^(127\.|::1|0\.0\.0\.0)') | list }}
      when: systemd_resolved_status.stdout == "active"

    - name: Get name servers from resolv.conf (Fallback)
      command: grep '^nameserver' /etc/resolv.conf
      register: resolv_conf_output
      changed_when: false
      ignore_errors: true
      when: name_servers | length == 0

    - name: Parse name servers from resolv.conf
      set_fact:
        name_servers: >-
          {{ resolv_conf_output.stdout | regex_findall('nameserver\s+([0-9\.]+)') 
          | reject('search', '^(127\.|::1|0\.0\.0\.0)') | list }}
      when: name_servers | length == 0

    - name: Get name servers using NetworkManager (nmcli)
      command: nmcli dev show | grep 'IP4.DNS'
      register: nmcli_output
      changed_when: false
      failed_when: false
      ignore_errors: true
      when: name_servers | length == 0

    - name: Parse name servers from nmcli
      set_fact:
        name_servers: >-
          {{ nmcli_output.stdout | regex_findall('IP4.DNS\\[?\\d*\\]?\\s+([0-9\\.]+)') 
          | reject('search', '^(127\.|::1|0\.0\.0\.0)') | list }}
      when: name_servers | length == 0

    - name: Ensure every host has meaningful name server output
      set_fact:
        name_servers: ["No external DNS resolvers found - check system settings"]
      when: name_servers | length == 0 or name_servers == []

    - name: Format name servers with configurable delimiter
      set_fact:
        name_servers_str: "{{ name_servers | join(name_server_delimiter) }}"

    - name: Debug - CSV row format
      debug:
        msg: "Row: {{ target_host }}, {{ system_hostname }}, {{ ip_address }}, {{ name_servers_str }}"

    - name: Collect all results
      set_fact:
        host_data: "{{ host_data | default([]) + 
                      [[target_host, system_hostname, ip_address, name_servers_str]] }}"

    - name: Ensure CSV file is created with all hosts
      delegate_to: localhost
      run_once: true
      copy:
        content: |
          ansible_host,Hostname,IP Address,Name Servers
          {% for row in groups['all'] %}
          {% set host_entry = hostvars[row] %}
          {{ host_entry.target_host | default('Unknown') }},
          {{ host_entry.system_hostname | default('Unknown') }},
          {{ host_entry.ip_address | default('Unknown') }},
          {{ host_entry.name_servers_str | default('No data') }}
          {% endfor %}
        dest: "./external_dns_info.csv"
